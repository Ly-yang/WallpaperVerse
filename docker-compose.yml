version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: wallpaperverse-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: wallpaperverse
      POSTGRES_USER: wallpaperverse
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-wallpaperverse123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - wallpaperverse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wallpaperverse -d wallpaperverse"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wallpaperverse-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - wallpaperverse-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: wallpaperverse-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 5000
      DATABASE_URL: postgresql://wallpaperverse:${POSTGRES_PASSWORD:-wallpaperverse123}@postgres:5432/wallpaperverse
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      
      # API Keys
      UNSPLASH_ACCESS_KEY: ${UNSPLASH_ACCESS_KEY}
      PEXELS_API_KEY: ${PEXELS_API_KEY}
      PIXABAY_API_KEY: ${PIXABAY_API_KEY}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      
      # CORS
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # Features
      ENABLE_CRON_JOBS: ${ENABLE_CRON_JOBS:-true}
      ENABLE_RATE_LIMITING: ${ENABLE_RATE_LIMITING:-true}
      
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "5000:5000"
    networks:
      - wallpaperverse-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
        REACT_APP_SITE_URL: ${REACT_APP_SITE_URL:-http://localhost:3000}
    container_name: wallpaperverse-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - wallpaperverse-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: wallpaperverse-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - wallpaperverse-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: wallpaperverse-prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - wallpaperverse-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: wallpaperverse-grafana
    restart: unless-stopped
    profiles:
      - monitoring
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - wallpaperverse-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  wallpaperverse-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
